{"version":3,"sources":["footer/mountains.svg","landing/landing.js","footer/footer.js","body/body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Landing","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleLoad","context","parallaxController","update","state","height","scrollTo","setState","window","innerHeight","addEventListener","updateHeight","bind","removeEventListener","react_default","a","createElement","className","style","e","lib","offsetXMax","offsetXMin","slowerScrollRate","Component","contextTypes","PropTypes","object","isRequired","Footer","offsetYMax","offsetYMin","src","require","alt","Body","href","App","landing_landing","body_body","footer_footer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08bf454b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mountains.f2bfb711.svg\";","import React, { Component } from 'react';\nimport './landing.css';\nimport { Parallax } from 'react-scroll-parallax';\nimport PropTypes from 'prop-types'\n\nconst ParallaxImage = (e) => (\n    <Parallax\n        className=\"parallax-container\"\n        offsetXMax={17}\n        offsetXMin={-7}\n        slowerScrollRate\n    >\n        <div className=\"bgimg\"\n            style={{\"height\": e.height}}>\n        </div>\n    </Parallax>\n);\n  \nclass Landing extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            height: props.height,\n            scrollTo: props.height\n        };\n    }\n    static contextTypes = {\n        parallaxController: PropTypes.object.isRequired,\n    };\n    \n    componentDidUpdate() {\n        this.handleLoad();\n    }\n\n    handleLoad = () => {\n        // updates cached values after image dimensions have loaded\n        this.context.parallaxController.update();\n    };\n\n    updateHeight() {\n        this.setState({\n            height: window.innerHeight+'px',\n            scrollTo: window.innerHeight\n        });\n    }\n    async componentDidMount() {\n        window.addEventListener(\"resize\", this.updateHeight.bind(this));\n        this.updateHeight();\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateHeight.bind(this));\n    }\n\n    render() {\n        return (\n            <div\n                className=\"landing-container\" \n                style={{\"height\": this.state.height}}\n            >\n                <div className=\"landing-text\">\n                    <h3>Tommy Lau</h3>\n                </div>\n                    {ParallaxImage(this.state)} \n            </div>\n        );\n    }\n}\n\nexport default Landing;","import React, { Component } from 'react';\nimport './footer.css';\nimport { Parallax } from 'react-scroll-parallax';\nimport PropTypes from 'prop-types'\n\nconst ParallaxImage2 = (e) => (\n    <Parallax\n        className=\"parallax-container-footer\"\n        offsetXMax={-15}\n        offsetXMin={15}\n        offsetYMax={20}\n        offsetYMin={20}\n        slowerScrollRate\n    >\n        <img className=\"bgimg-footer-1\" src={require('./mountains.svg')} alt=\"\"></img>\n        {/* <div className=\"bgimg-footer-1\"\n            style={{\"height\": 300}}>\n        </div> */}\n    </Parallax>\n);\n\nconst ParallaxImage3 = (e) => (\n    <Parallax\n        className=\"parallax-container-footer\"\n        offsetXMax={-90}\n        offsetXMin={-100}\n        slowerScrollRate\n    >\n        <img className=\"bgimg-footer-2\" src={require('./mountains.svg')} alt=\"\"></img>\n        {/* <div className=\"bgimg-footer-2\"\n            style={{\"height\": 300}}>\n        </div> */}\n    </Parallax>\n);\n\nclass Footer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            height: props.height,\n        };\n    }\n\n    static contextTypes = {\n        parallaxController: PropTypes.object.isRequired,\n    };\n    \n    componentDidUpdate() {\n        this.handleLoad();\n    }\n\n    handleLoad = () => {\n        // updates cached values after image dimensions have loaded\n        this.context.parallaxController.update();\n    };\n    \n    render() {\n        return (\n            <div className=\"footer-container\">\n                {ParallaxImage2(this.state)}\n                {ParallaxImage3(this.state)}\n            </div>\n        );\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport './body.css';\n\nclass Body extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            height: props.height,\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"body-container\">\n                <div className=\"button-container\">\n                    <a href=\"about:blank\">\n                        <span className=\"theme-button\" href=\"about:blank\">\n                            resume\n                        </span>\n                    </a>\n                    <a href=\"https://www.linkedin.com/in/lautommy/\">\n                        <span className=\"theme-button\">\n                            linkedin\n                        </span>\n                    </a>\n                    <a href=\"https://github.com/teelau\">\n                        <span className=\"theme-button\">\n                            github\n                        </span>\n                    </a>\n                    <a>\n                        <span className=\"theme-button\">\n                            contact\n                        </span>\n                    </a>\n                    <a href=\"about:blank\">\n                        <span className=\"theme-button\">\n                            projects\n                        </span>\n                    </a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Body;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Landing from './landing/landing';\nimport Footer from './footer/footer';\nimport Body from './body/body';\nimport { ParallaxProvider } from 'react-scroll-parallax';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <ParallaxProvider>\n        <div className=\"Main\">\n          <Landing></Landing>\n          <Body></Body>\n          <Footer></Footer>\n        </div> {/*Main*/}\n      </ParallaxProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}