{"version":3,"sources":["landing/landing.js","footer/footer.js","body/body.js","App.js","serviceWorker.js","index.js"],"names":["Landing","handleLoad","_this","context","parallaxController","update","this","react_default","a","createElement","className","Fade_default","bottom","duration","renderDelay_ms","lib","offsetXMax","offsetXMin","slowerScrollRate","Component","contextTypes","PropTypes","object","isRequired","Footer","offsetYMax","offsetYMin","Body","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","height","href","target","rel","App","landing_landing","body_body","footer_footer","Boolean","window","location","hostname","match","ReactDOM","render","teelau_github_io_src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23d686cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './landing.css';\r\nimport { Parallax } from 'react-scroll-parallax';\r\nimport PropTypes from 'prop-types'\r\nimport Fade from 'react-reveal/Fade';\r\n\r\nconst renderDelay_ms = 2500;\r\nconst ParallaxImage = () => (\r\n    <Parallax\r\n        className=\"parallax-container\"\r\n        offsetXMax={17}\r\n        offsetXMin={-7}\r\n        slowerScrollRate\r\n    >\r\n        <div className=\"bgimg\"></div>\r\n    </Parallax>\r\n);\r\n  \r\nclass Landing extends Component {\r\n\r\n    static contextTypes = {\r\n        parallaxController: PropTypes.object.isRequired,\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        this.handleLoad();\r\n    }\r\n\r\n    handleLoad = () => {\r\n        // updates cached values after image dimensions have loaded\r\n        this.context.parallaxController.update();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"landing-container\" >\r\n                <div className=\"landing-text\">\r\n                    <Fade bottom duration={renderDelay_ms}>\r\n                        <h3>tommy lau</h3>\r\n                    </Fade>\r\n                    <Fade bottom duration={renderDelay_ms*2}>\r\n                        <h4>aspiring software engineer</h4>\r\n                    </Fade>\r\n                </div>\r\n                 {ParallaxImage()} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Landing;","import React, { Component } from 'react';\r\nimport './footer.css';\r\nimport { Parallax } from 'react-scroll-parallax';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ParallaxImage2 = () => (\r\n    <Parallax\r\n        className=\"parallax-container-footer\"\r\n        offsetXMax={-20}\r\n        offsetXMin={20}\r\n        offsetYMax={10}\r\n        offsetYMin={10}\r\n        slowerScrollRate\r\n    >\r\n        <div className=\"bgimg1\"></div>\r\n        {/* <img className=\"bgimg-footer-1\" src={require('./mountains.svg')} alt=\"\"></img> */}\r\n    </Parallax>\r\n);\r\n\r\nconst ParallaxImage3 = () => (\r\n    <Parallax\r\n        className=\"parallax-container-footer\"\r\n        offsetXMax={20}\r\n        offsetXMin={-20}\r\n        slowerScrollRate\r\n    >\r\n        <div className=\"bgimg2\"></div>\r\n        {/* <img className=\"bgimg-footer-2\" src={require('./mountains.svg')} alt=\"\"></img> */}\r\n    </Parallax>\r\n);\r\n\r\nclass Footer extends Component {\r\n\r\n    static contextTypes = {\r\n        parallaxController: PropTypes.object.isRequired,\r\n    };\r\n    \r\n    componentDidUpdate() {\r\n        this.handleLoad();\r\n    }\r\n\r\n    handleLoad = () => {\r\n        // updates cached values after image dimensions have loaded\r\n        this.context.parallaxController.update();\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"footer-container\">\r\n                {ParallaxImage2()}\r\n                {ParallaxImage3()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport './body.css';\r\nimport Fade from 'react-reveal/Fade';\r\n\r\nclass Body extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            height: props.height,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"button-container\">\r\n                    <Fade bottom>\r\n                        <a href=\"TommyLauResume.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <span className=\"theme-button\">\r\n                                resume\r\n                            </span>\r\n                        </a>\r\n                    </Fade>\r\n                    <Fade bottom>\r\n                        <a href=\"https://www.linkedin.com/in/lautommy/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <span className=\"theme-button\">\r\n                                linkedin\r\n                            </span>\r\n                        </a>\r\n                    </Fade>\r\n                    <Fade bottom>\r\n                        <a href=\"https://github.com/teelau\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <span className=\"theme-button\">\r\n                                github\r\n                            </span>\r\n                        </a>\r\n                    </Fade>\r\n                    <Fade bottom>\r\n                        <a href=\"mailto:tommylau94@gmail.com\">\r\n                            <span className=\"theme-button\">\r\n                                contact\r\n                            </span>\r\n                        </a>\r\n                    </Fade>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Body;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Landing from './landing/landing';\r\nimport Footer from './footer/footer';\r\nimport Body from './body/body';\r\nimport { ParallaxProvider } from 'react-scroll-parallax';\r\n\r\nclass App extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <ParallaxProvider>\r\n        <div className=\"Main\">\r\n          <Landing></Landing>\r\n          <Body></Body>\r\n          <Footer></Footer>\r\n        </div>\r\n      </ParallaxProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}